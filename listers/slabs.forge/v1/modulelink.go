// slabs-forge

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/slabs-forge/klabs-api/apis/slabs.forge/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ModuleLinkLister helps list ModuleLinks.
// All objects returned here must be treated as read-only.
type ModuleLinkLister interface {
	// List lists all ModuleLinks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ModuleLink, err error)
	// ModuleLinks returns an object that can list and get ModuleLinks.
	ModuleLinks(namespace string) ModuleLinkNamespaceLister
	ModuleLinkListerExpansion
}

// moduleLinkLister implements the ModuleLinkLister interface.
type moduleLinkLister struct {
	indexer cache.Indexer
}

// NewModuleLinkLister returns a new ModuleLinkLister.
func NewModuleLinkLister(indexer cache.Indexer) ModuleLinkLister {
	return &moduleLinkLister{indexer: indexer}
}

// List lists all ModuleLinks in the indexer.
func (s *moduleLinkLister) List(selector labels.Selector) (ret []*v1.ModuleLink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ModuleLink))
	})
	return ret, err
}

// ModuleLinks returns an object that can list and get ModuleLinks.
func (s *moduleLinkLister) ModuleLinks(namespace string) ModuleLinkNamespaceLister {
	return moduleLinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ModuleLinkNamespaceLister helps list and get ModuleLinks.
// All objects returned here must be treated as read-only.
type ModuleLinkNamespaceLister interface {
	// List lists all ModuleLinks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ModuleLink, err error)
	// Get retrieves the ModuleLink from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ModuleLink, error)
	ModuleLinkNamespaceListerExpansion
}

// moduleLinkNamespaceLister implements the ModuleLinkNamespaceLister
// interface.
type moduleLinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ModuleLinks in the indexer for a given namespace.
func (s moduleLinkNamespaceLister) List(selector labels.Selector) (ret []*v1.ModuleLink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ModuleLink))
	})
	return ret, err
}

// Get retrieves the ModuleLink from the indexer for a given namespace and name.
func (s moduleLinkNamespaceLister) Get(name string) (*v1.ModuleLink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("modulelink"), name)
	}
	return obj.(*v1.ModuleLink), nil
}
